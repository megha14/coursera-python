# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand = []	# create Hand object

    def __str__(self):
        s = ""
        for card in self.hand:
            s += card.get_suit() + card.get_rank() + " "
        return s

    def add_card(self, card):
        self.hand.append(card)	# add a card object to a hand

    def get_value(self):
        hand_value = 0
        for hand in self.hand:
            if hand.get_rank() in VALUES:
                hand_value += VALUES[hand.get_rank()]
        for hand in self.hand:
            if hand.get_rank() == 'A':
                if hand_value + 10 <= 21:
                    hand_value += 10
        return hand_value# compute the value of the hand, see Blackjack video
      
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards        
        for hand in self.hand:
            hand.draw(canvas,pos)
            pos[0] += CARD_SIZE[0] + 20
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []	# create a Deck object
        for j in SUITS:
            for i in RANKS:
                self.deck.append(Card(j,i))
        
    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)    # use random.shuffle()

    def deal_card(self):
        return self.deck.pop()	# deal a card object from the deck
    
    def __str__(self):
        s = ""
        for d in self.deck:
            s += str(d) + " "
        return "Deck is " + s	# return a string representing the deck

#define event handlers for buttons
def deal():
    global score,play,outcome, in_play, test_deck, dealer_hand, player_hand
    # your code goes here
    if in_play:
        score -= 1
        outcome = "You lose!!"
        play = "Press Deal to start New game"
        in_play = False
    else:
        outcome = ""
        play = "Hit or Stand?"
        test_deck = Deck()
        dealer_hand = Hand()
        player_hand = Hand()
        test_deck.shuffle()
        for i in range(0,2,1):
            player_hand.add_card(test_deck.deal_card())
            dealer_hand.add_card(test_deck.deal_card())
        in_play = True

def hit():
    global play,outcome, in_play, test_deck, dealer_hand, player_hand,score
    # if the hand is in play, hit the player
    
    if in_play:
        if player_hand.get_value() <= 21:
            player_hand.add_card(test_deck.deal_card())
            if player_hand.get_value() > 21:
                play = "Deal?"
                outcome = "You went bust and lose!!"
                score -= 1 
                in_play = False
            
                
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global play,outcome, in_play, test_deck, dealer_hand, player_hand,score
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play:
        play = "Deal?"
        while dealer_hand.get_value() <= 17:
                dealer_hand.add_card(test_deck.deal_card())
        if dealer_hand.get_value() > 21:
            outcome = "Dealer went bust and loses!!"                    
            score += 1
        elif dealer_hand.get_value() >= player_hand.get_value():
            outcome = "Dealer Wins!!"                    
            score -= 1
        elif dealer_hand.get_value() < player_hand.get_value():
            outcome = "You Win!!"
            score += 1   
                
    in_play = False
    
    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("BLACKJACK GAME",[100,50],50,"Orange")
    canvas.draw_text("Score : "+str(score),[250,100],30,"Fuchsia")
    canvas.draw_text("Dealer",[50,175],30,"Aqua")
    canvas.draw_text(outcome,[250,175],30,"Yellow")
    dealer_hand.draw(canvas,[50,200])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [50 + CARD_BACK_CENTER[0], 200 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
    canvas.draw_text("Player",[50,375],30,"Aqua")
    canvas.draw_text(play,[250,375],30,"Yellow")
    player_hand.draw(canvas,[50,400])
    

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
