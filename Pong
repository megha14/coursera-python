# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
paddle_vel = 4
game_paused = False
count = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH // 2, HEIGHT // 2]
    if direction == "RIGHT":
        ball_vel = [random.randrange( 120 / 60 , 240 / 60 ), - random.randrange( 60 / 60 , 180 / 60 )]
    elif direction == "LEFT":
        ball_vel = [- random.randrange( 120 / 60 , 240 / 60 ), - random.randrange( 60 / 60 , 180 / 60 )]


        
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = 200
    paddle2_pos = 200
    paddle1_vel = 0
    paddle2_vel = 0
    score1 = 0
    score2 = 0
    spawn_ball(random.choice(["LEFT","RIGHT"]))
    
def pause():
    global game_paused
    game_paused = not game_paused
    
def draw(c):
    global game_paused, score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,paddle1_vel,paddle2_vel
    
        
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    if not game_paused:
        ball_pos[0] += ball_vel[0]
        ball_pos[1] += ball_vel[1]
    
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= HEIGHT - 1 - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
        
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT and ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT:
            ball_vel[0] = - (ball_vel[0] + (0.1 * ball_vel[0]))
            ball_vel[1] = ball_vel[1] + (0.1 * ball_vel[1])
            #print ball_vel
        else:
            score2 += 1
            spawn_ball("RIGHT")
            
    elif ball_pos[0] >= WIDTH - 1 - PAD_WIDTH - BALL_RADIUS:
        if ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT and ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT:
            ball_vel[0] = - (ball_vel[0] + (0.1 * ball_vel[0]))
            ball_vel[1] = ball_vel[1] + (0.1 * ball_vel[1])
            #print ball_vel            
        else:
            score1 += 1
            spawn_ball("LEFT")
    
    # draw ball
    c.draw_circle(ball_pos, BALL_RADIUS, 5, "Orange", "Yellow")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos <= HALF_PAD_HEIGHT:
        paddle1_pos = HALF_PAD_HEIGHT
    elif paddle1_pos >= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos = HEIGHT - HALF_PAD_HEIGHT

    paddle1_pos += paddle1_vel
    
    if paddle2_pos <= HALF_PAD_HEIGHT:
        paddle2_pos = HALF_PAD_HEIGHT
    elif paddle2_pos >= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos = HEIGHT - HALF_PAD_HEIGHT

    paddle2_pos += paddle2_vel
       
    
    # draw paddles
    c.draw_line([0, paddle1_pos - HALF_PAD_HEIGHT],[0, paddle1_pos + HALF_PAD_HEIGHT], PAD_WIDTH * 2, "Red") 
    c.draw_line([596, paddle2_pos - HALF_PAD_HEIGHT],[596, paddle2_pos + HALF_PAD_HEIGHT], PAD_WIDTH, "Purple") 
       
    
    # draw scores
    c.draw_text("Score1",[150,100],30,"Red")
    c.draw_text(str(score1),[180,150],30,"Red")
    c.draw_text("Score2",[350,100],30,"Purple")
    c.draw_text(str(score2),[380,150],30,"Purple")
    
    if score1 == 5:
        c.draw_text("Player 1 wins!!",[150,250],50,"Fuchsia")
        new_game()
    elif score2 == 5:
        c.draw_text("Player 2 wins!!",[150,250],50,"Fuchsia")
        new_game()
        
        
        
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = - paddle_vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel = paddle_vel
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = - paddle_vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel = paddle_vel
    
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"] or key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["up"] or key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background("Green")
frame.add_button("Restart",new_game,100)
frame.add_button("Pause",pause,100)
frame.add_label("w for up and s for down : Player 1")
frame.add_label("up arrow key for up and down arrow key for down : Player 2")
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
